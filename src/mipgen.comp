#version 450

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform sampler2D in_image;
// We'll use a PC to select between these images.
layout(set = 0, binding = 1, r8) uniform image2D out_image_r8;
layout(set = 0, binding = 1, rgba8) uniform image2D out_image_rgba8;

layout(push_constant) uniform PC {
	uint channels;
} pc;

vec3 irr_glsl_oetf_impl_shared_2_4(in vec3 linear, in float vertex) {
    bvec3 right = greaterThan(linear, vec3(vertex));
    return mix(linear * 12.92, pow(linear, vec3(1.0 / 2.4)) * 1.055 - vec3(0.055), right);
}

// Converts linear color value to sRGB. 
// See https://github.com/buildaworldnet/IrrlichtBAW/blob/shader_pipeline/include/irr/builtin/glsl/colorspace/OETF.glsl#L16
// compatible with scRGB as well
vec3 irr_glsl_oetf_sRGB(in vec3 linear) {
    bvec3 negatif = lessThan(linear, vec3(0.0));
    vec3 absVal = irr_glsl_oetf_impl_shared_2_4(abs(linear), 0.0031308);
    return mix(absVal, -absVal, negatif);
}

vec4 cubic(float v) {
	vec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;
	vec4 s = n * n * n;
	float x = s.x;
	float y = s.y - 4.0 * s.x;
	float z = s.z - 4.0 * s.y + 6.0 * s.x;
	float w = 6.0 - x - y - z;
	return vec4(x, y, z, w) * (1.0/6.0);
}

vec4 texture_bicubic(vec2 tex_coords) {
	vec2 tex_size = textureSize(in_image, 0);
	vec2 inv_tex_size = 1.0 / tex_size;
	
	tex_coords = tex_coords * tex_size - 0.5;
	vec2 fxy = fract(tex_coords);
	tex_coords -= fxy;

	vec4 xcubic = cubic(fxy.x);
	vec4 ycubic = cubic(fxy.y);
	
	vec4 c = tex_coords.xxyy + vec2(-0.5, 1.5).xyxy;

	vec4 s = vec4(xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw);
	vec4 offset = c + vec4 (xcubic.yw, ycubic.yw) / s;
	offset *= inv_tex_size.xxyy;

	vec4 sample0 = texture(in_image, offset.xz);
	vec4 sample1 = texture(in_image, offset.yz);
	vec4 sample2 = texture(in_image, offset.xw);
	vec4 sample3 = texture(in_image, offset.yw);
	
	
	float sx = s.x / (s.x + s.y);
	float sy = s.z / (s.z + s.w);
	return mix(mix(sample3, sample2, sx), mix(sample1, sample0, sx), sy);
}

void main() {
	ivec2 out_image_size = imageSize(out_image_rgba8); // Doesn't matter which one we use here
	ivec2 texels = ivec2(gl_GlobalInvocationID.xy);
	// Do not write out of the image bounds
	if (texels.x >= out_image_size.x || texels.y >= out_image_size.y) return;
	vec2 tex_coords = vec2(texels) / vec2(out_image_size);
	vec4 bicubic_sample = texture_bicubic(tex_coords);
	vec4 bicubic_srgb = vec4(irr_glsl_oetf_sRGB(bicubic_sample.rgb), 1);

	if (pc.channels == 1)
		imageStore(out_image_r8, texels, bicubic_srgb);
	else if (pc.channels == 4)
		imageStore(out_image_rgba8, texels, bicubic_srgb);
}

// Compile with
// glslangValidator mipgen.comp -V120 -S comp -o mipgen.comp.spv 